definitions:
  models.Role:
    properties:
      createdAt:
        type: string
      description:
        type: string
      name:
        type: string
      roleId:
        type: integer
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      firstName:
        type: string
      id:
        type: integer
      login:
        type: string
      roleId:
        type: integer
      secondName:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /ping:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "pong"}'
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /role:
    post:
      consumes:
      - application/json
      parameters:
      - description: Role to create
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Create a new role
      tags:
      - Roles
  /role/{roleId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Role ID to delete
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a role by ID
      tags:
      - Roles
    get:
      consumes:
      - application/json
      parameters:
      - description: Role ID to get
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      summary: Get a role by ID
      tags:
      - Roles
    patch:
      consumes:
      - application/json
      parameters:
      - description: Role ID to update
        in: path
        name: roleId
        required: true
        type: integer
      - description: Role details to update
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update a role by ID
      tags:
      - Roles
  /role/roles:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      summary: Get all roles
      tags:
      - Roles
  /user:
    post:
      consumes:
      - application/json
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - Users
  /user/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Пользователь удален"}'
          schema:
            type: string
      summary: Удалить пользователя по ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Получить пользователя по ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID пользователя
        in: path
        name: userId
        required: true
        type: integer
      - description: Пользователь для обновления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Обновить пользователя по ID
      tags:
      - Users
  /users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Получить всех пользователей
      tags:
      - Users
swagger: "2.0"
